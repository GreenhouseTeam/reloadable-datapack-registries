import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom'
}
base {
    archivesName = "${mod_id}-fabric"
}
sourceSets {
    api {
        java
        resources
        compileClasspath += sourceSets.main.compileClasspath
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}
repositories {
    maven {
        url 'https://maven.merchantpug.net/releases/'
    }
}
dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modLocalRuntime "net.merchantpug.mc267125:MC-267125:1.0.0"

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    implementation project(path: ':common', configuration: 'api')
    implementation project(":common")
    testmodCompileOnly project(":common").sourceSets.testmod.output
    testmodCompileOnly sourceSets.main.output

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    testCompileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
}
loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            source(sourceSets.testmod)
            ideConfigGenerated(true)
            runDir("run")
            vmArg("-Dmixin.debug.verbose=true")
            vmArg("-Dmixin.debug.export=true")
        }
        server {
            server()
            setConfigName("Fabric Server")
            source(sourceSets.testmod)
            ideConfigGenerated(true)
            runDir("run")
            vmArg("-Dmixin.debug.verbose=true")
            vmArg("-Dmixin.debug.export=true")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.api.allSource)
    source(sourceSets.api.allSource)
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.api.allJava)
    source(sourceSets.api.allJava)
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.api.allSource)
    from(sourceSets.api.allSource)
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

compileApiJava {
    source(project(":common").sourceSets.api.allSource)
}

compileTestmodJava {
    source(project(":common").sourceSets.api.allSource)
    source(project(":common").sourceSets.main.allSource)
    source(project(":common").sourceSets.testmod.allSource)
    source(sourceSets.main.allSource)
}
processTestmodResources {
    from project(":common").sourceSets.testmod.resources
    from sourceSets.main.resources
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

tasks.register('apiJar', Jar) {
    archiveClassifier = "api"
    dependsOn(compileApiJava)
    dependsOn(processApiResources)
    from sourceSets.api.output.classesDirs
    from sourceSets.api.output.resourcesDir
}

// Credits to Witixin. https://gist.github.com/Witixin1512/bbb8484523ea6a0e8440f17621f89f95
tasks.register("remapApiJar", RemapJarTask,  task -> {
    final AbstractArchiveTask jarTask = getTasks().named("apiJar", AbstractArchiveTask.class).get();
    task.dependsOn(jarTask)

    task.getInputFile().convention(jarTask.getArchiveFile())
    task.dependsOn(getTasks().named("apiJar"))
    task.targetNamespace.set("intermediary")

    remapperIsolation = true
})

artifacts {
    api apiJar
}


build.dependsOn remapApiJar

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            artifact(remapApiJar) {
                builtBy remapApiJar
                classifier 'api'
            }
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
        maven {
            name = "merchantpug"
            url = "https://maven.merchantpug.net/releases"
            credentials {
                username System.getenv('MAVEN_USERNAME')
                password System.getenv('MAVEN_PASSWORD')
            }
            authentication {
                create("basic", BasicAuthentication)
            }
        }
    }
}
