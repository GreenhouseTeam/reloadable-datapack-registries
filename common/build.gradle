plugins {
    id 'idea'
    id 'java'
    id 'maven-publish'
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT'
}
base {
    archivesName = "${mod_id}-common"
}
sourceSets {
    api {
        java
        resources
        compileClasspath += sourceSets.main.compileClasspath
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}
configurations {
    api
}
minecraft {
    version(minecraft_version)
    if(file("src/main/resources/${mod_id}.accesswidener").exists()){
        accessWideners(file("src/main/resources/${mod_id}.accesswidener"))
    }
}
dependencies {
    testmodCompileOnly sourceSets.main.output

    compileOnly group:'org.spongepowered', name:'mixin', version:'0.8.5'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
}
tasks.register('apiJar', Jar) {
    archiveClassifier = "api"
    dependsOn(compileApiJava)
    dependsOn(processApiResources)
    from sourceSets.api.output.classesDirs
    from sourceSets.api.output.resourcesDir
    filesMatching(['pack.mcmeta']) {
        expand project.properties
    }
}

artifacts {
    api apiJar
}

build.dependsOn apiJar

tasks.withType(JavaCompile).configureEach {
    source(sourceSets.api.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(sourceSets.api.allSource)
}
tasks.named("sourcesJar", Jar) {
    from(sourceSets.api.allSource)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}