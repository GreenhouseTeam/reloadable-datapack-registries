import org.apache.tools.ant.filters.LineContains

plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.52'
    id 'java-library'
}
base {
    archivesName = "${mod_id}-neoforge"
}
sourceSets {
    api {
        java
        resources
        compileClasspath += sourceSets.main.compileClasspath
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

minecraft.accessTransformers.file file('src/main/resources/rdpr.cfg')

runs {
    configureEach {
        modSource project.sourceSets.testmod
        jvmArgument "-Dmixin.debug.export=true"
        jvmArgument "-Dmixin.debug.verbose=true"
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"

    compileOnly project(path: ':common', configuration: 'api')
    testCompileOnly project(path: ':common', configuration: 'api')
    compileOnly project(':common')
    testCompileOnly project(':common')
    testmodCompileOnly project(":common").sourceSets.testmod.output
    testmodCompileOnly sourceSets.main.output

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    testCompileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>


tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.api.allSource)
}

compileJava {
    source(sourceSets.api.allSource)
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.api.allJava)
    source(sourceSets.api.allJava)
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.api.allSource)
    from(sourceSets.api.allSource)
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources

    filesMatching("*.mixins.json") {
        filter(LineContains, negate: true, contains: ['refmap' ] )
    }
}

// Whilst NeoForge doesn't allow for multi mod setups, we can do this
// to add the main classes to the testmod source.
compileTestmodJava {
    source(project(":common").sourceSets.main.allSource)
    source(project(":common").sourceSets.testmod.allSource)
    source(sourceSets.api.allSource)
    source(sourceSets.main.allSource)
}
processTestmodResources {
    from project(":common").sourceSets.testmod.resources
    from sourceSets.main.resources
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

tasks.register('apiJar', Jar) {
    archiveClassifier = "api"
    from sourceSets.api.output.classesDirs
}

artifacts {
    api apiJar
}

assemble.dependsOn apiJar

processTestmodResources {
    def expandProps = [
            "version": version,
            "group": project.group, //Else we target the task's group.
            "minecraft_version": minecraft_version,
            "minecraft_version_range": minecraft_version_range,
            "mod_name": mod_name,
            "mod_id": mod_id,
            "license": license,
            "description": project.description,
            "neoforge_version": neoforge_version,
            "neoforge_loader_version_range": neoforge_loader_version_range
    ]

    filesMatching(['pack.mcmeta', 'META-INF/mods.toml', '*.mixins.json']) {
        expand expandProps
    }
    inputs.properties(expandProps)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            artifact(apiJar) {
                builtBy apiJar
                classifier 'api'
            }
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
        maven {
            name = "merchantpug"
            url = "https://maven.merchantpug.net/releases"
            credentials {
                username System.getenv('MAVEN_USERNAME')
                password System.getenv('MAVEN_PASSWORD')
            }
            authentication {
                create("basic", BasicAuthentication)
            }
        }
    }
}
